= *TutiFruti* v1.0 -- Server
La Plávusha (Lazar Ljubenovic, Marija Ðordevic)
:toc:
:toclevels: 3

== O programu

Serverski deo ove aplikacije je realizovan u Lispu. 
Svaki igrač, odnosno njegov agent, je jedan lisp server. 
On predstavlja veb api čije se funkcije pozivaju Ajax pozivima.

== Kako pokrenuti projekat

=== Neophodne instalacije

Potrebno je instalirati Quicklisp, on upravlja Lisp bibliotekama i omogućava njihovo lako korišćenje u projektu.
`File -> Load -> quicklisp.lisp`.
Potrebno je omogućiti `remote ajax call` s obzirom da se javascript koji poziva server nije na samom serveru. 
Instalirati chrome plugin: `https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en`.

=== Pokretanje servera

Najpre je potrebno kompajlrati i učitati fajl `setup.cl` (on pribavlja neophodne biblioteke), zatim fajl `server.cl` koji je sam veb api.
Ukoliko dodje do greške prilikom učitavanja fajla izabrati opciju `skip`.

=== Korišćenje primera

U samu aplikaciju je ugrađeno nekoliko primera. Svaki, i na serveru i u aplikaciji, počinje sa `example` i predstavlja samo primer stanja table.
Kako je trenutna implementacija funkcije `odigraj-potez` siromašna i vrlo ograničena, moguće je je pokrenuti samo ukoliko je trenutno prikazan `example xo`.


== Osnovna struktura

=== Parametri

Server sadrži 5 globalno definisana parametra koji odgovaraju objektu opisanom u odelju `reffff`.
Oni predstvaljaju podatke koje je server dobio u poslednjem pozivu funkcije `odigraj-potez`.
Može im se pristupiti iz konzole u bilo kom trenutku što može biti zgodno prilikom debagiranja.

=== Funkcije

Postoje dve funkcije koje obezbeđuju komunikaciju: `reset` i `odigraj-potez`. 
Funkcija `reset` šalje informacije o tabli i igraču. 
Ne sadrži nikakvu logiku, niti koristi dobijene parametre već samo postavlja osnovne podatke.
Funkcija `odigraj-potez` dobija stanje table i postavlja verdnosti globalnih parametara na osnovu dobijenih podataka. 
Zatim izvršava potez igrača i vraća novo stanje table.

=== Port

Na kraju fajla `server.cl` se nalazi komanda `(defparameter \*server\* (start (make-instance 'easy-acceptor :address "localhost" :port 8081)))` na kraju koje se definiše port na kome server radi.
Jako je važno da broj porta na serveru bude isti kao broj porta koji se nalazi na samoj aplikaciji kako biste komunicirali baš sa vašim serverom.

[NOTE]
====
Za testiranje logike aplikacije možete staviti isti broj porta za oba igrača.
====

=== Vaš zadatak

Potrebno je implementirati odigravanje poteza odnosno funkciju `_odigraj-potez`.
Dat je primer njegove implementacije čiji cilj nije odigravanje poteza već ukazuje na strukturu funkcije.

- `read-state` prevodi dobijeno stanje table u interno stanje table. To su dve liste `_x` i `_o` koje čuvaju listu koordinata na kojima se nalaze odgovarajući znaci.
- `pomeri` uvećava prvu koordintatu svakog elementa iz liste `_x` tj. pomera sve znake `x` na dole.
- `create-state` menja parametar `_state` tako da odgovara trenutnom internom stanju table.

[NOTE]
====
Validacija stanja nije implementirana.
====

== Kako dodati api funkciju?

=== Server

Kreirati ajax funkciju po uzoru na ostale `(defun-ajax odigraj-potez (data)(\*ajax-processor\* :method :post :callback-data :response-text)`. 
Ukoliko želimo da obrađuje `GET` zahteve uklonimo `:method :post`.
Rezultat funkcije je string koji se dobija `(fromat nil ... )` naredbom.

=== JavaScript

Na početku fajla `server.js` se nalazi objekat `smackjack` koji sadrži niz podržanih funkcija. Dodati svoju po uzoru na ostale.
Napisati samo funkcuju npr. `  function reset(data, callback, errorHandler = null, port = "8081") {
return ajaxCall("RESET", [data], "GET", callback, errorHandler, responseText, port);}`. 
Prvi parametar koji se prosleđuje funkciji `ajaxCall` je naziv funkcije na serveru. Voditi računa da mora biti napisan velikim slovima. 
Treći parametar je vrta HTTP zahteva i mora odgovorati onom na serveru.
Dodati funckiju `smackjack` objektu: `smackjack.reset = reset`.

Sada je moguće pozvati ovu funkciju `smackjack.reset("", parse, null)`. 







