= *TutiFruti* v1.0 -- Server
:author: Lazar Ljubenović, Marija Đorđević
:email: lazar.ljubenovic.1995@gmail.com
:toc:
:toclevels: 2
:toc: left
:toc-title: Sadržaj
:sectlinks:
:stylesheet: docs.css
:linkcss:
:icons: font
:source-highlighter: highlightjs
:highlightjs-theme: monokai

== O programu

TutiFruti je mala veb-aplikacija koja koristi precizno definisan protokol za prikaz i razmenu poteza kod igara na tabli za dva igrača.
Razvijena je od strane dvoje studenta za potrebe predmeta *Veštačka inteligencija* koji se sluša na trećoj godini osnovnih akademskih studija na Elektronskom fakultetu u Nišu, u okviru koga se tradicionalno svake godine održava turnir gde se inteligentni agenti koje su timovi razvili takmiče u igri koju na početku semestra definišu asistenti.

Serverski deo aplikacije je realizovan u Lispu i svaki igrač (odnosno njegov agent) je jedan Lisp server koji predstavlja veb-API čije se funkcije zovu Ajaks pozivima.

[TIP]
====
Nije potrebno nikakvo prethodno iskustvo niti znanje o radu servera da bi se koristio TuriFruti.
====

== Pokretanje projekta

=== Neophodne instalacije

Potrebno je instalirati Quicklisp koji upravlja Lisp bibliotekama i omogućava njihovo lako korišćenje u projektu.
Iz programskog okruženja *Allegro*, izabrati `File` -> `Load` -> `quicklisp.lisp`.
Pošto se `html` fajlovi otvaraju lokalno, a server podiže na `localhost`, brauzeri iz bezbednosnih razloga ne dozvoljavaju razmenu Ajaks objekata među njima.
Ova varijera se može prevazići instaliranjem dodataka za brauzer koji dopuštaju _cross-origin_ Ajaks pozive.

Na primer, za Chrome se može instalirati link:https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en[CORS].

=== Pokretanje servera

Najpre je potrebno kompajlrati i učitati fajl `setup.cl` (pribavlja neophodne biblioteke), a zatim i`server.cl` koji predstavlja sâm veb-API.
Ukoliko dođe do greške prilikom učitavanja fajla izabrati opciju _Skip_.

[TIP]
====
U aplikaciju je ugrađeno nekoliko primera stanja table.
Na serveru, primeri počinju prefiksom `example`, a u JavaScript kodu se nalaze u objektu `example`.
Testiranje servera se može obaviti učitavanjem primera `example xo` i pokretanjem igre iz GUI-ja.
====






== Osnovna struktura

=== Parametri

Server sadrži šest globalno definisanih parametara koji odgovaraju objektu opisanom u link:docs.asc[Strukturi objekta].
Oni predstvaljaju podatke koje je server dobio u poslednjem pozivu funkcije `odigraj-potez`.
Može im se pristupiti iz konzole u bilo kom trenutku, što može biti od koristi prilikom debagiranja.

=== Funkcije

Postoje dve funkcije koje obezbeđuju komunikaciju: `reset` i `odigraj-potez`. 

- Funkcija `reset` šalje informacije o tabli i igraču. 
Ne sadrži nikakvu logiku, niti koristi dobijene parametre već samo *postavlja osnovne podatke*.
- Funkcija `odigraj-potez` *pribavlja stanje* table i postavlja vrednosti globalnih parametara na osnovu dobijenih podataka. 
Zatim izvršava potez igrača i vraća novo stanje table.

=== Port

Na kraju fajla `server.cl` se nalazi sledeća komanda.

[source, lisp]
----
(defparameter *server*
    (start
        (make-instance 'easy-acceptor :address "localhost" :port 8081)))
----

Poslednji parametar funkcije `make-instance` je port na kome server radi.

[CAUTION]
Jako je važno da broj porta na kom je podignut server bude isti kao broj porta koji je upisan na GUI-ju, kako bi se mogla uspostaviti komunikacija.

[TIP]
Za testiranje logike aplikacije možete staviti isti broj porta za oba igrača.
Tako će inteligentni agent igrati sam sa sobom.
Polje `message` (vidi link:docs.asc[Strukturu objekta]) možete iskoristiti npr. za prikaz vrednosti heuristike, itd.

=== Vaš zadatak

Potrebno je implementirati odigravanje poteza odnosno funkciju `_odigraj-potez`.
Dat je primer njene implementacije (u primeru cilj nije odigravanje poteza već struktura funkcije).

- `read-state` prevodi dobijeno stanje table u interno stanje table.
To su dve liste `_x` i `_o` koje čuvaju listu koordinata na kojima se nalaze odgovarajući znaci.
- `pomeri` uvećava prvu koordintatu svakog elementa iz liste `_x` tj. pomera sve znake `x` na dole.
- `create-state` menja parametar `_state` tako da odgovara trenutnom internom stanju table.








== Dodavanje API funkcije

TutiFruti je po strukturi dosta skalabilan, tako da je moguće lako dodavanje novih mogućnosti ukoliko za tim javi potreba.
Nadalje su ukratko upisani ključni delovi implementacije, kao i smernice za neke korake koje treba izvršiti u slučaju dodavanja novih funkcionalnosti.

[NOTE]
====
Članove tima koji je razvio TutiFruti možete da kontaktirate putem mejla mailto:lazar.ljubenovic.1995@gmail.com[`lazar.ljubenovic.1995@gmail.com`].
====

=== Server

Ajaks funkcije ne treba definisati sa `defun`, nego sa `defun-ajax`, po uzoru na ostale.

[source, lisp]
----
(defun-ajax odigraj-potez (data)
    (*ajax-processor* :method :post :callback-data :response-text)
----

Ako treba obrađivati GET zahteve, dovoljno je samo ukloniti parametar `:method :post`.
Rezultat funkcije je string koji se dobija pozivom funkcije `(format nil ... )`.

=== JavaScript

Na početku fajla `server.js` se nalazi objekat `smackjack` koji sadrži niz podržanih funkcija.
Dodati svoju po uzoru na ostale.

[source, javascript]
----
function reset(data, callback, errorHandler = null, port = "8081") {
    return ajaxCall("RESET", [data], "GET", callback, errorHandler, responseText, port);
}
----

Prvi parametar koji se prosleđuje funkciji `ajaxCall` je naziv funkcije na serveru.
Treći parametar je vrsta HTTP zahteva i mora odgovorati onom na serveru.

[CAUTION]
====
Svaku novu funkciju treba pridružiti ključu u objektu `smackjack`.

[source, javascript]
smackjack.reset = reset
====

[WARNING]
====
Voditi računa da ime funkcije koja se poziva (u ovom primeru `RESET`) mora biti napisano velikim slovima, u skladu sa konvencijom u Lispu.
====







